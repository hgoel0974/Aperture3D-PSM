#define iterations 17
#define formuparam 0.53

#define volsteps 20
#define stepsize 0.1

#define zoom   0.800
#define tile   0.850
#define speed  0.010 

#define brightness 0.0015
#define darkmatter 0.300
#define distfading 0.730
#define saturation 0.850

void main( float4 in a_Position  : POSITION,
		   float4 out v_Position : POSITION,
		   float2 in a_TexCoord : TEXCOORD0,
		   float2 out v_TexCoord : TEXCOORD0,
		   float4 out v_Color : COLOR0,
			uniform float iGlobalTime,
			uniform float2 iMouse,
		   uniform float4x4 WorldViewProj
           )
{
	v_Position = a_Position * 128;
	//v_TexCoord = a_TexCoord * 256;
	v_TexCoord = mul(a_Position, WorldViewProj) * 256;
	
	float2 iResolution = float2(128,128);
		//get coords and direction
	float2 uv=v_TexCoord.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	float3 dir=float3(uv*zoom,1.);
	float time=iGlobalTime*speed+.25;

	//mouse rotation
	float a1=.5;//+iMouse.x/iResolution.x*2.;
	float a2=.8;//+iMouse.y/iResolution.y*2.;
	//float2x2 rot1=float2x2(cos(a1),sin(a1),-sin(a1),cos(a1));
	//float2x2 rot2=float2x2(cos(a2),sin(a2),-sin(a2),cos(a2));
	float2x2 rot1 = float2x2(0.877, 0.479, -0.479, 0.877);
	float2x2 rot2 = float2x2(0.696,0.717,-0.717,0.696);
	dir.xz=mul(rot1, dir.xz);
	dir.xy=mul(rot2, dir.xy);
	float3 from=float3(1.,.5,0.5);
	from+=float3(time*2.,time,-2.);
	from.xz=mul(rot1,from.xz);
	from.xy=mul(rot2, from.xy);
	
	//volumetric rendering
	float s=0.1,fade=1.;
	float3 v=float3(0.);
	for (int r=0; r<volsteps; r++) {
		float3 p=from+s*dir*.5;
		
		p = abs(float3(tile)-fmod(p,float3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a*=a*a; // add contrast
		//if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=float3(dm,dm*.5,0.);
		v+=fade;
		v+=float3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
	v=lerp(float3(length(v)),v,saturation); //color adjust
	v_Color = float4(v*.01,v.r * .01);	
}